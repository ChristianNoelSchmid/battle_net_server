datasource db {
  provider = "sqlite"
  url      = "file:./app.db"
}

//generator client {
//  provider = "cargo prisma"
//  output   = "../src/prisma.rs"
//}

model User {
  id                     Int       @default(autoincrement())
  email                  String    @unique
  pwd_hash               String
  card_idx               Int
  lvl                    Int       @default(1)
  riddle_quest_completed Boolean   @default(false)
  exhausted              Boolean   @default(false)
  guessed_today          Boolean   @default(false)
  last_login             DateTime?

  murdered_game_states GameState[]
  refresh_tokens       RefreshToken[]
  evidence_cards       UserCard[]
  quests               Quest[]
  items                UserItem[]
  state                UserState?
  GameWinner           GameWinner?

  @@id(id)
  @@map("users")
}

model RefreshToken {
  id         Int       @default(autoincrement())
  user_id    Int
  repl_id    Int?      @unique
  created_on DateTime  @default(now())
  expires    DateTime?
  token      String
  revoked_on DateTime?
  revoked_by String?

  user           User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  next_token     RefreshToken? @relation("RefreshTokenChain", fields: [repl_id], references: [id], onDelete: Cascade)
  previous_token RefreshToken? @relation("RefreshTokenChain")

  @@id(id)
  @@index(fields: [token])
  @@map("refresh_tokens")
}

model Stats {
  id                Int     @default(autoincrement())
  health            Int
  armor             Int
  power             Int     @default(1)
  missing_next_turn Boolean @default(false)

  user_states    UserState[]
  quest_monsters QuestMonster[]

  @@id(id)
  @@map("stats")
}

model UserState {
  user_id    Int      @unique
  last_login DateTime @default(now())
  stats_id   Int      @unique

  user  User  @relation(fields: [user_id], references: [id])
  stats Stats @relation(fields: [stats_id], references: [id], onDelete: Cascade)

  @@id(user_id)
  @@map("user_states")
}

model UserCard {
  user_id   Int
  cat_idx   Int
  card_idx  Int
  confirmed Boolean @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, cat_idx, card_idx])
  @@map("user_cards")
}

model GameState {
  id                 Int      @default(autoincrement())
  murdered_user_id   Int
  last_daily_refresh DateTime @default(now())

  murdered_user User @relation(fields: [murdered_user_id], references: [id])

  @@id(id)
  @@map("game_states")
}

model Quest {
  id         Int      @default(autoincrement())
  user_id    Int
  completed  Boolean  @default(false)
  created_on DateTime @default(now())
  quest_type Int

  user        User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  monster     QuestMonster?
  QuestRiddle QuestRiddle?

  @@id(id)
  @@map("quests")
}

model QuestMonster {
  id          Int @default(autoincrement())
  quest_id    Int @unique
  stats_id    Int @unique
  monster_idx Int

  // The QuestMonster's next action and flavor text
  next_action     Int?
  action_flv_text String?

  quest Quest @relation(fields: [quest_id], references: [id], onDelete: Cascade)
  stats Stats @relation(fields: [stats_id], references: [id], onDelete: Cascade)

  @@id(id)
  @@map("monster_states")
}

model QuestRiddle {
  id         Int @default(autoincrement())
  quest_id   Int @unique
  riddle_idx Int

  quest Quest @relation(fields: [quest_id], references: [id], onDelete: Cascade)

  @@id(id)
  @@map("quest_riddles")
}

model GameTargetCard {
  cat_idx  Int
  card_idx Int

  @@id([cat_idx, card_idx])
  @@map("game_target_cards")
}

model GameWinner {
  id      Int  @default(autoincrement())
  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])

  @@id(id)
  @@map("game_winners")
}

model UserItem {
  id       Int @default(autoincrement())
  user_id  Int
  item_idx Int

  user             User              @relation(fields: [user_id], references: [id])
  UserEquippedItem UserEquippedItem?

  @@id(id)
  @@map("user_items")
}

model UserEquippedItem {
  item_id Int      @unique
  item    UserItem @relation(fields: [item_id], references: [id])

  @@id(item_id)
  @@map("user_equipped_items")
}
